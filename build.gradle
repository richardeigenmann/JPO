plugins {
    id 'java'
    id 'application'
    id "com.github.ben-manes.versions" version "0.52.0" // dependency updates
    id 'idea' // optional (to generate IntelliJ IDEA project files)
    id 'org.beryx.jlink' version '3.1.1'
    id "org.javamodularity.moduleplugin" version "1.8.15"
    id "org.sonarqube" version "6.2.0.5505"
    id 'jacoco'
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

version = 0.24
group = 'org.jpo'

repositories {
    mavenCentral()
}

application {
    mainModule = 'org.jpo' // name defined in module-info.java
    mainClass = 'org.jpo.Main'
    //applicationDefaultJvmArgs = ['-Dsun.java2d.uiScale.enabled=true']
    //applicationDefaultJvmArgs = ['-Dsun.java2d.uiScale.enabled=true', '-Dsun.java2d.uiScale=2.0']
    //mainClass = 'org.jpo.testground.PlayWithFontAwesome'
    //mainClass = 'org.jpo.testground.ResizableJFrameTester'
    //mainClass = 'org.jpo.testground.ThumbnailDescriptionTester'
    //mainClass = 'org.jpo.testground.ThumbnailTester'
    //mainClass = 'org.jpo.testground.TransposeTester'
    //mainClass = 'org.jpo.testground.LargePanel'
}

java {
    modularity.inferModulePath = true // Essential for hybrid projects or mixed module/classpath dependencies
}

// Define the path for generated sources. This is a standard location.
def generatedSourcesDir = file("$buildDir/generated-sources/java")

// To get the Version number from the build.gradle into the source file we let gradle create a source file
// with the current version in it.
tasks.register('generateVersionFile') {
    description = 'Generates a Java file with the project version.'
    group = 'build' // Helps organize tasks when you run `gradle tasks`

    // Define package and class name for the generated file
    def packageName = 'org.jpo.generated'
    def className = 'GeneratedVersion'

    // Construct the full output path for the Java file
    def outputDirForPackage = file("$generatedSourcesDir/${packageName.replace('.', '/')}")
    def outputFile = file("$outputDirForPackage/${className}.java")

    // Declare inputs and outputs for Gradle's incremental build (up-to-date checking)
    // The task will only re-run if the project version changes or the output file is missing.
    inputs.property("projectVersion", project.version.toString())
    outputs.file(outputFile)

    doLast {
        outputDirForPackage.mkdirs() // Ensure the package directory structure exists
        outputFile.text = """\
package ${packageName};

// This file is automatically generated by Gradle.
// Do not edit this file manually.
public final class ${className} {
    public static final String JPO_VERSION = "${project.version}";

    private ${className}() {
        // Private constructor to prevent instantiation of this utility class
    }
}
"""
        println "Generated version file at: ${outputFile.absolutePath}"
    }
}

// Add the directory containing generated sources to the main Java source set
// This tells the Java compiler to include files from this directory.
sourceSets {
    main {
        java {
            srcDir generatedSourcesDir
        }
    }
}

// Ensure that the generateVersionFile task runs before Java compilation
compileJava.dependsOn generateVersionFile

// Add the generated sources directory to be cleaned by the `clean` task
clean.doLast {
    delete generatedSourcesDir
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += "--enable-preview"
}

tasks.withType(Test).configureEach {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += '--enable-preview'
}

dependencies {
    implementation 'com.miglayout:miglayout-swing:11.4.2'
    implementation 'com.miglayout:miglayout-core:11.4.2'
    implementation 'org.apache.commons:commons-text:1.13.1' // jpackage doesn't like 1.10.0, 1.11.0 or 1.13.1.  1.9 works
    implementation files('libs/tagcloud.library-0.0.1.jar')
    implementation 'org.apache.commons:commons-compress:1.27.1'
    implementation 'org.apache.commons:commons-jcs3:3.2.1'
    implementation 'org.apache.commons:commons-jcs3-core:3.2.1'
    implementation 'org.apache.commons:commons-jcs3-jcache:3.2.1'
    implementation 'commons-io:commons-io:2.19.0'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'commons-logging:commons-logging:1.3.5'
    implementation 'commons-net:commons-net:3.11.1'
    implementation 'org.jetbrains:annotations:26.0.2'
    implementation 'com.google.gdata:core:1.47.1', {
        exclude group: "xpp3", module: "xpp3"
    }
    implementation 'com.google.guava:guava:33.4.8-jre'
    implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
    implementation 'com.jcraft:jsch:0.1.55'
    implementation files('libs/jwizz-0.1.4.jar')
    implementation 'org.jxmapviewer:jxmapviewer2:2.8'
    implementation 'com.drewnoakes:metadata-extractor:2.19.0'
    // needed to pull down 1.1.3p1 from 5 May 2018 from http://www.docking-frames.org/download.html
    // Maven dependencies don't work
    //implementation group: 'org.dockingframes', name: 'docking-frames-core', version: '1.1.2p6a'
    //implementation group: 'org.dockingframes', name: 'docking-frames-common', version: '1.1.2p6a'
    implementation files('libs/docking-frames-common.jar')
    implementation files('libs/docking-frames-core.jar')
    implementation 'com.adobe.xmp:xmpcore:6.1.11'
    implementation 'com.twelvemonkeys.imageio:imageio-batik:3.12.0'
    implementation 'org.apache.xmlgraphics:batik-transcoder:1.19', {
        exclude group: "xml-apis", module: "xml-apis"
    }
    implementation 'org.apache.xmlgraphics:batik-anim:1.19', {
        exclude group: "xml-apis", module: "xml-apis"
    }
    implementation 'org.apache.xmlgraphics:batik-rasterizer-ext:1.19', {
        exclude group: "xml-apis", module: "xml-apis"
    }
    implementation 'org.apache.xmlgraphics:batik-shared-resources:1.19'

    implementation 'org.apache.xmlgraphics:batik-extension:1.19', {
        exclude group: "xml-apis", module: "xml-apis"
    }
    implementation 'org.apache.xmlgraphics:xmlgraphics-commons:2.11'
    implementation 'org.apache.xmlgraphics:batik-svggen:1.19'
    implementation 'com.twelvemonkeys.imageio:imageio-bmp:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-clippath:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-icns:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-iff:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-jpeg:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-hdr:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-pcx:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-pdf:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-pict:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-pnm:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-psd:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-sgi:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-tiff:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-tga:3.12.0'
    implementation 'com.twelvemonkeys.imageio:imageio-thumbsdb:3.12.0'
    implementation group: 'org.json', name: 'json', version: '20250517'
    implementation 'com.jidesoft:jide-oss:3.6.18'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.13.0-RC1'
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation(platform('org.junit:junit-bom:5.13.0-RC1'))
    testImplementation 'org.assertj:assertj-core:4.0.0-M1'
    testImplementation 'org.assertj:assertj-swing:3.17.1'
    testImplementation 'org.awaitility:awaitility:4.3.0'
    implementation group: 'javax.cache', name: 'cache-api', version: '1.1.1'
    implementation group: 'javax.enterprise', name: 'cdi-api', version: '2.0'
    implementation 'io.github.classgraph:classgraph:4.8.179'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'

}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['--enable-preview']
}

test {
    // this tells the tests that we don't have a graphical environment TravisCI, SemaphoreCI etc need this.
    // systemProperty 'java.awt.headless', 'false'
    // copy the Gradle JVM properties down to the test JVM so that SemaphoreCI can ignore the tests that don't work in the headless environment
    systemProperties = System.getProperties()
    maxParallelForks = 8

    useJUnitPlatform()

    moduleOptions {
        runOnClasspath = true
    }

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    reports {
        junitXml.required = false
        html.required = true
    }
}

/* To turn on FINE Logging add this block to the class after the LOGGER definition:
    static {
        LOGGER.setLevel(Level.FINE);
        Handler consoleHandler = new ConsoleHandler();
        consoleHandler.setLevel(Level.FINE);
        LOGGER.addHandler(consoleHandler);
    }
*/


jacoco {
    toolVersion = "0.8.13"
}

jacocoTestReport {
    group 'verification'
    reports {
        xml.required = true
        html.required = true
    }
}

plugins.withType(JacocoPlugin).configureEach {
    tasks["test"].finalizedBy 'jacocoTestReport'
}

check.dependsOn jacocoTestReport


// docker run -d --name sonarqube -p 9000:9000 sonarqube:8.4.2-community
// http://localhost admin admin
sonarqube {
    properties {
        property("sonar.projectName", "Java Picture Organizer")
        property("sonar.projectKey", "richardeigenmann_JPO")
        property("sonar.coverage.jacoco.xmlReportPaths", "${project.layout.buildDirectory}/reports/jacoco/test/jacocoTestReport.xml")
        property("sonar.sources", "src/main")
        property("sonar.java.binaries", "${project.layout.buildDirectory}/classes/java/main")
        property("sonar.tests", "src/test")
        property("sonar.tests.binaries", "${project.layout.buildDirectory}/classes/java/test")
        property("sonar.gradle.skipCompile", true)
        property "sonar.organization", "richardeigenmann-github"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
project.tasks["sonarqube"].dependsOn jacocoTestReport

jar {
    manifest {
        attributes(
                "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                "Main-Class": 'org.jpo.Main',
                'Permissions': 'all-permissions'
        )
        attributes(
                [ "Copy": "(c) 2001-2024, Richard Eigenmann, Zürich, Switzerland" ], "Copyright"
        )
    }
    into ('org/jpo/images') { from 'src/images' }
}

// this task creates the FatJar with everything in it
shadowJar {
    //dependsOn(build)
    into ('org/jpo/images') { from 'src/images' }
    mergeServiceFiles()
}

tasks.register('signJar') {
    dependsOn 'shadowJar'
    doLast {
        def props = new Properties()
        file("/richi/Privat/Documents/jpo.private.gradle.properties").withInputStream { props.load(it) }
        println 'Keystore file name: ' + props.getProperty("keystoreFileName")
        println "Signing: build/libs/Jpo-${version}-all.jar"

        File signdir = new File("$buildDir/jars/signed") as File
        signdir.mkdirs()

        ant.signjar(
                destDir: "${signdir.absolutePath}",
                jar: "build/libs/Jpo-${version}-all.jar",
                alias: props.getProperty("keyalias"),
                storetype: "jks",
                keystore: props.getProperty("keystoreFileName"),
                storepass: props.getProperty("keystorepass"),
                verbose: true,
                preservelastmodified: "true",
                tsaurl: "http://timestamp.digicert.com"
        )
    }
}

javadoc.onlyIf { !project.hasProperty('skipJavadoc') }

javadoc {
    options.encoding = "UTF-8"
    options.addBooleanOption('-enable-preview', true)
    options.addStringOption('-release', '24')
    // gradle doesn't copy the doc-files images!
    // this option is ignored
    options.docFilesSubDirs = true
    doFirst {
        options.modulePath = [] + classpath.files
        options.classpath = []
    }
    doLast {
        println "${project.layout.buildDirectory}/docs/javadoc/org/jpo/eventbus/doc-files"
        // instead we have to copy explicitly!
        copy {
            from "src/main/java/org/jpo/eventbus/doc-files"
            into (layout.buildDirectory.dir("docs/javadoc/org.jpo/org/jpo/eventbus/doc-files"))
            include "*.png"
        }
        println "${project.layout.buildDirectory}/docs/javadoc/org/jpo/gui/swing/doc-files"
        copy {
            from "src/main/java/org/jpo/gui/swing/doc-files"
            into (layout.buildDirectory.dir("docs/javadoc/org.jpo/org/jpo/swing/doc-files"))
            include "*.png"
        }
        println "${project.layout.buildDirectory}/docs/javadoc/org/jpo/gui/doc-files"
        copy {
            from "src/main/java/org/jpo/gui/doc-files"
            into (layout.buildDirectory.dir("docs/javadoc/org.jpo/org/jpo/gui"))
            include "*.png"
        }
    }
}

import java.awt.Desktop

tasks.register('openJavadocInBrowser') {
    dependsOn 'javadoc'
    group = 'documentation'
    doLast {
        def docFile = new File(project.rootDir, "build/docs/javadoc/index.html")
        Desktop.getDesktop().browse(docFile.toURI())
    }
}

import org.gradle.internal.os.OperatingSystem
jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        name = 'JPO'
        jvmArgs = []
    }
    // Google Jules figured out how to fix the commons-text dependency:
    forceMerge 'commons-text'

    jpackage {
        var os = OperatingSystem.current()

        println "*** Building on ${os.familyName} / ${os.name} / ${os.version} / ${System.getProperty("os.arch")}."
        println "*** Building on ${os.toString()}."

        outputDir = 'my-packaging'
        imageName = 'JPO'
        skipInstaller = true
        installerName = 'jpo'
        vendor = "Richard Eigenmann (project owner)"
        icon = 'src/web/favicon.ico'
        if (os.isLinux()) {
            installerOptions = ['--linux-shortcut', '--install-dir', '/usr']
        } else if (os.isWindows()) {
            imageOptions = ['--win-console']
            installerOptions = []
        }

    }
}

tasks.register('uploadWebsitePages', Exec) {
    group 'website'
    description 'Publishes the JPO website pages'
    // note that the ssh key of sourceforge needs to be in /home/richi/.ssh/id_rsa
    // and that the known_hosts needs to have the host key ssh-keyscan -t rsa web.sourceforge.net
    commandLine('rsync', '-avP',
            '--exclude="*"',
            '--include="*.php"',
            '--include="*.html"',
            '--include="*.css"',
            '--include="*.php"',
            '--include="fontconfig"',
            '--include="*.gif"',
            '--include="*.png"',
            '--include="*.jpg"',
            '--include="*.json"',
            '--include="*.bat"',
            '--include="*.flatpakref"',
            "${projectDir}/src/web/", 'richieigenmann@web.sourceforge.net:/home/project-web/j-po/htdocs/')
}

tasks.register('uploadJavadoc', Exec) {
    group 'website'
    description 'Publishes the JPO website pages'
    dependsOn javadoc
    // note that the ssh key of sourceforge needs to be in /home/richi/.ssh/id_rsa
    // and that the known_hosts needs to have the host key ssh-keyscan -t rsa web.sourceforge.net
    commandLine('rsync', '-avP', "${buildDir}/docs/javadoc", 'richieigenmann@web.sourceforge.net:/home/project-web/j-po/htdocs/')
}

tasks.register('uploadRpmInstaller', Exec) {
    group 'website'
    description 'Publishes the JPO rpm installer bundle'
    dependsOn jpackage
    // note that the ssh key of sourceforge needs to be in /home/richi/.ssh/id_rsa
    // and that the known_hosts needs to have the host key ssh-keyscan -t rsa web.sourceforge.net
    commandLine('rsync', '-v', '--no-perms', "${buildDir}/my-packaging/jpo-${version}-1.x86_64.rpm", "richieigenmann@web.sourceforge.net:/home/frs/project/j-po/")
}

tasks.register('uploadDebInstaller', Exec) {
    group 'website'
    description 'Publishes the JPO Debian installer bundle'
    dependsOn jpackage
    // note that the ssh key of sourceforge needs to be in /home/richi/.ssh/id_rsa
    // and that the known_hosts needs to have the host key ssh-keyscan -t rsa web.sourceforge.net
    commandLine('rsync', '-v', '--no-perms', "${buildDir}/my-packaging/jpo_${version}_amd64.deb", "richieigenmann@web.sourceforge.net:/home/frs/project/j-po/")
}

tasks.register('uploadMsiInstaller', Exec) {
    group 'website'
    description 'Publishes the JPO MSI installer bundle'
    dependsOn jpackage
    // note that the ssh key of sourceforge needs to be in /home/richi/.ssh/id_rsa
    // and that the known_hosts needs to have the host key ssh-keyscan -t rsa web.sourceforge.net
    commandLine('rsync', '-v', '--no-perms', "${buildDir}/my-packaging/jpo-${version}.msi", "richieigenmann@web.sourceforge.net:/home/frs/project/j-po/")
}

tasks.register('uploadJar', Exec) {
    group 'website'
    description 'Publishes the JPO shadow jar bundle'
    dependsOn signJar
    // note that the ssh key of sourceforge needs to be in /home/richi/.ssh/id_rsa
    // and that the known_hosts needs to have the host key ssh-keyscan -t rsa web.sourceforge.net
    commandLine('rsync', '-avP', "${buildDir}/jars/signed/Jpo-${version}-all.jar", 'richieigenmann@web.sourceforge.net:/home/frs/project/j-po/')
}

tasks.register('uploadFlatpakRepo', Exec) {
    group 'website'
    description 'Publishes the JPO flatpak repo'
    // note that the ssh key of sourceforge needs to be in /home/richi/.ssh/id_rsa
    // and that the known_hosts needs to have the host key ssh-keyscan -t rsa web.sourceforge.net
    commandLine('rsync', '-arvP', "${buildDir}/flatpak-repo", 'richieigenmann@web.sourceforge.net:/home/project-web/j-po/htdocs/')
}

tasks.register('uploadWebsite') {
    group 'website'
    description 'Publishes the JPO website'
    dependsOn uploadWebsitePages, uploadJavadoc
}


/*
        depends on signJar
# see https://blogs.gnome.org/alexl/2017/02/10/maintaining-a-flatpak-repository/
        mkdir -p build/flatpak
flatpak run io.sourceforge.j-po
flatpak remove io.sourceforge.j-po

flatpak run io.sourceforge.j-po

# add the repo:
flatpak --user remote-add --no-gpg-verify flatpak-repo repo
flatpak remotes

# Install
flatpak --user install flatpak-repo io.sourceforge.j-po

flatpak-builder --user --install build/flatpak --repo=build/flatpak-repo --force-clean src/flatpak/io.sourceforge.j-po.json
# build into repo
flatpak-builder --repo=build/flatpak-repo --keep-build-dirs --force-clean build/flatpak src/flatpak/io.sourceforge.j-po.json
flatpak build-export repo build/flatpak-repo build/flatpak stable
flatpak build-sign build/flatpak-repo --gpg-sign=A67917F40940020B0134D3F53949172FBD2EAF66
flatpak build-update-repo build/flatpak-repo --gpg-sign=A67917F40940020B0134D3F53949172FBD2EAF66
gpg2 --export A67917F40940020B0134D3F53949172FBD2EAF66 > repo-public-key.gpg
base64 repo-public-key.gpg | tr -d '\n'
# add it to the flatpakref file
# upload repo to sf
# upload flatpakref


flatpak --user install https://j-po.sourceforge.io/io.sourceforge.j-po.flatpakref
*/
