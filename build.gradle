buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
    }
}

plugins {
    id "org.sonarqube" version "3.1.1"
    id "com.github.ben-manes.versions" version "0.36.0"
    id 'signing'
    id 'java'
    id 'jacoco'
    //id 'org.beryx.jlink' version '2.16.4'
    id 'eclipse'
    id 'idea'
}

apply plugin: "com.github.johnrengelman.shadow"

java {
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
    withJavadocJar()
}

tasks.withType(JavaCompile).all {
    options.compilerArgs += "--enable-preview"
}

tasks.withType(Test).all {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec).all {
    jvmArgs += '--enable-preview'
}

compileJava {
    group = 'build'
    options.encoding = "UTF-8"
    options.compilerArgs += ['--enable-preview']
}
compileTestJava {
    group = 'build'
    options.encoding = "UTF-8"
    options.compilerArgs += ['--enable-preview']
}

test {
    // this tells the tests that we don't have a graphical environment TravisCI, SemaphoreCI etc need this.
    // systemProperty 'java.awt.headless', 'false'
    // copy the Gradle JVM properties down to the test JVM so that SemaphoreCI can ignore the tests that don't work in the headless environment
    systemProperties = System.getProperties()
}

javadoc {
    options.encoding = "UTF-8"
    options.addBooleanOption('-enable-preview', true)
    options.addStringOption('-release', '15')
    // gradle doesn't copy the doc-files images!
    // this option is ignored
    options.docFilesSubDirs = true
    doLast{
        // instead we have to copy explicitly!
        copy{
            from "src/main/java/org/jpo/eventbus/doc-files"
            into "$project.buildDir/docs/javadoc/org/jpo/eventbus/doc-files"
            include "*.png"
        }
        copy{
            from "src/main/java/org/jpo/gui/swing/doc-files"
            into "$project.buildDir/docs/javadoc/org/jpo/gui/swing/doc-files"
            include "*.png"
        }
    }
}

task openJavadocInBrowser {
    dependsOn 'javadoc'
    group = 'documentation'
    doLast {
        java.awt.Desktop.desktop.open(new File(buildDir, "/docs/javadoc/index.html"))
    }
}

repositories {
    mavenCentral()
    jcenter()
}


def jpoVersion = '0.14'

dependencies {
    implementation 'org.apache.commons:commons-compress:1.20'
    implementation 'org.apache.directory.studio:org.apache.commons.io:2.4'
    implementation 'org.apache.commons:commons-jcs3:3.0'
    implementation 'org.apache.commons:commons-jcs3-core:3.0'
    implementation 'org.apache.commons:commons-jcs3-jcache:3.0'
    implementation 'org.apache.commons:commons-lang3:3.11'
    //implementation 'org.apache.commons:commons-jcs-core:2.2.1'
    //implementation 'org.apache.commons:commons-jcs-jcache:2.2.1'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'commons-net:commons-net:3.7.2'
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'com.google.gdata:core:1.47.1'

    //implementation files('libs/gdata-maps-2.0.jar')
    //implementation files('libs/gdata-media-1.0.jar')
    //implementation files('libs/gdata-photos-2.0.jar')

    implementation 'com.google.guava:guava:30.1-jre'
    implementation 'javax.mail:javax.mail-api:1.6.2'
    implementation 'com.jcraft:jsch:0.1.55'

    implementation files('libs/jwizz-0.1.4.jar')

    implementation 'org.jxmapviewer:jxmapviewer2:2.6'
    implementation 'com.drewnoakes:metadata-extractor:2.15.0'

    implementation 'com.miglayout:miglayout-swing:5.2'

    // needed to pull down 1.1.3p1 from 5 May 2018 from http://www.docking-frames.org/download.html
    // Maven dependencies don't work
    //implementation group: 'org.dockingframes', name: 'docking-frames-core', version: '1.1.2p6a'
    //implementation group: 'org.dockingframes', name: 'docking-frames-common', version: '1.1.2p6a'
    implementation files('libs/docking-frames-common.jar')
    implementation files('libs/docking-frames-core.jar')

    implementation files('libs/TagCloud.jar')
    
    //used by Metadata Extractor. Note only 5.x seems to be compatible
    //implementation 'com.adobe.xmp:xmpcore:5.1.3'
    //implementation 'com.adobe.xmp:xmpcore:6.1.10'
    implementation 'org.jetbrains:annotations:20.1.0'

    implementation 'com.twelvemonkeys.imageio:imageio-batik:3.6.2'
    implementation 'org.apache.xmlgraphics:batik-transcoder:1.14'
    implementation 'org.apache.xmlgraphics:batik-anim:1.14'
    implementation 'org.apache.xmlgraphics:batik-rasterizer-ext:1.14'
    implementation 'org.apache.xmlgraphics:batik-shared-resources:1.14'
    implementation 'org.apache.xmlgraphics:batik-extension:1.14'
    implementation 'org.apache.xmlgraphics:xmlgraphics-commons:2.6'
    implementation 'org.apache.xmlgraphics:batik-svggen:1.14'
    implementation 'com.twelvemonkeys.imageio:imageio-bmp:3.6.2'
    //implementation 'com.twelvemonkeys.imageio:imageio-clippath:3.4.1' //OK -- But what does it do?
    implementation 'com.twelvemonkeys.imageio:imageio-icns:3.6.2'
    implementation 'com.twelvemonkeys.imageio:imageio-iff:3.6.2'
    implementation 'com.twelvemonkeys.imageio:imageio-jpeg:3.6.2'
    implementation 'com.twelvemonkeys.imageio:imageio-hdr:3.6.2'
    implementation 'com.twelvemonkeys.imageio:imageio-pcx:3.6.2'
    implementation 'com.twelvemonkeys.imageio:imageio-pdf:3.6.2'
    implementation 'com.twelvemonkeys.imageio:imageio-pict:3.6.2'
    implementation 'com.twelvemonkeys.imageio:imageio-pnm:3.6.2'
    implementation 'com.twelvemonkeys.imageio:imageio-psd:3.6.2'
    implementation 'com.twelvemonkeys.imageio:imageio-sgi:3.6.2'
    implementation 'com.twelvemonkeys.imageio:imageio-tiff:3.6.2'
    implementation 'com.twelvemonkeys.imageio:imageio-tga:3.6.2'
    implementation 'com.twelvemonkeys.imageio:imageio-thumbsdb:3.6.2'
    implementation group: 'org.json', name: 'json', version: '20201115'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation 'org.assertj:assertj-swing:3.17.1'
    testImplementation 'org.awaitility:awaitility:4.0.3'

}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        main
        resources  {
            srcDir 'src/test/images'
        }
    }
}
    

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}

jar {
    manifest {
        attributes(
            "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '),
            "Main-Class": 'org.jpo.Main',
            'Permissions': 'all-permissions'
        )
        attributes(
            [ "Copy": "(c) 2001-2019, Richard Eigenmann, ZÃ¼rich, Switzerland" ], "Copyright"
        )
    }
    into ('org/jpo/images') { from 'src/images' }
}

// this task creates the FatJar with everything in it
shadowJar {
    dependsOn(build)
    into ('org/jpo/images') { from 'src/images' }
    mergeServiceFiles()
}

task signJar(dependsOn: 'shadowJar',description: 'Sign shadowJar.',group: 'build'){
    doLast{
        def props = new Properties()
        file("/richi/Privat/Documents/jpo.private.gradle.properties").withInputStream { props.load(it) }
        println 'Keystore file name: ' + props.getProperty("keystoreFileName")

        File signdir  = new File("$buildDir/jars/signed") as File
        signdir.mkdirs()

        ant.signjar(
            destDir: "${signdir.absolutePath}",
                  jar: 'build/libs/Jpo-all.jar',
                  alias: props.getProperty("keyalias"),
                  storetype: "jks",
                  keystore: props.getProperty("keystoreFileName"),
                  storepass: props.getProperty("keystorepass"),
                  verbose: true,
                  preservelastmodified: "true",
                  tsaurl: "http://timestamp.digicert.com"
      )
    }
}

/*task buildWindowsExecutable(type: Exec) {
    group = 'build'
    dependsOn shadowJar
    File exedir  = new File("$buildDir/executables") as File
    exedir.mkdirs()
    commandLine '/usr/bin/makensis', '-XOutFile ' + exedir + '/Jpo.exe', 'Windowsbuilder/jpoexe.nsi'
}

task buildWindowsInstaller(type: Exec) {
    group = 'build'
    dependsOn buildWindowsExecutable
    File exedir  = new File("$buildDir/executables") as File
    workingDir exedir.toString()
    commandLine '/usr/bin/makensis', 
        '-XOutFile ' + exedir + '/JPO-Installer-0.14.exe',
        projectDir.absolutePath + '/Windowsbuilder/jpoinstaller.nsi'
}*/


task run(type: JavaExec) {
    group 'build'
    description 'Runs JPO from the shadowJar'
    dependsOn shadowJar
    classpath = files( 'build/libs/Jpo-all.jar' )
    main = 'org.jpo.Main'
}

test.onlyIf { !project.hasProperty('skipTests') }
javadoc.onlyIf { !project.hasProperty('skipJavadoc') }

tasks.register('runExcludingTests') {
    group 'build'
    project.ext.skipTests = true
    project.ext.skipJavadoc = true
    dependsOn run
}

jacoco {
    //Support for Java 15 starts with 0.8.7
    toolVersion = "0.8.6"
}

jacocoTestReport {
    group 'verification'
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

plugins.withType(JacocoPlugin) {
    // jacoco doesn't like Java 15 in Nov 2020
    tasks["test"].finalizedBy 'jacocoTestReport'
}

check.dependsOn jacocoTestReport

task uploadWebsitePages(type:Exec) {
    group 'website'
    description 'Publishes the JPO website pages'
    dependsOn javadoc
    // note that the ssh key of sourceforge needs to be in /home/richi/.ssh/id_rsa
    // and that the known_hosts needs to have the host key ssh-keyscan -t rsa web.sourceforge.net
    commandLine ('rsync', '-avP',
            '--exclude="*"',
            '--include="*.php"',
            '--include="*.html"',
            '--include="*.css"',
            '--include="*.php"',
            '--include="fontconfig"',
            '--include="*.gif"',
            '--include="*.png"',
            '--include="*.jpg"',
            '--include="*.json"',
            '--include="*.bat"',
            '--include="*.flatpakref"',
            "${projectDir}/web/", 'richieigenmann@web.sourceforge.net:/home/project-web/j-po/htdocs/')
}

task uploadJavadoc(type:Exec) {
    group 'website'
    description 'Publishes the JPO website pages'
    dependsOn javadoc
    // note that the ssh key of sourceforge needs to be in /home/richi/.ssh/id_rsa
    // and that the known_hosts needs to have the host key ssh-keyscan -t rsa web.sourceforge.net
    commandLine ('rsync', '-avP', "${buildDir}/docs/javadoc", 'richieigenmann@web.sourceforge.net:/home/project-web/j-po/htdocs/')
}

task uploadWindowsInstaller(type:Exec) {
    group 'website'
    description 'Publishes the JPO windows installer bundle'
    //dependsOn buildWindowsInstaller
    // note that the ssh key of sourceforge needs to be in /home/richi/.ssh/id_rsa
    // and that the known_hosts needs to have the host key ssh-keyscan -t rsa web.sourceforge.net
    //commandLine ('rsync', '-avP', "${buildDir}/executables/JPO-Installer-${jpoVersion}.exe", 'richieigenmann@web.sourceforge.net:/home/frs/project/j-po/')
    commandLine ('rsync', '-avP', "${buildDir}/executables/JPO-${jpoVersion}.exe", "${buildDir}/jars/signed/Jpo-all.jar", 'richieigenmann@web.sourceforge.net:/home/frs/project/j-po/')
    commandLine ('rsync', '-avP', "${buildDir}/jars/signed/Jpo-all.jar", "richieigenmann@web.sourceforge.net:/home/frs/project/j-po/Jpo-all-${jpoVersion}.jar")
}

task uploadFlatpakRepo(type:Exec) {
    group 'website'
    description 'Publishes the JPO flatpak repo'
    // note that the ssh key of sourceforge needs to be in /home/richi/.ssh/id_rsa
    // and that the known_hosts needs to have the host key ssh-keyscan -t rsa web.sourceforge.net
    commandLine ('rsync', '-arvP', "${buildDir}/flatpak-repo", 'richieigenmann@web.sourceforge.net:/home/project-web/j-po/htdocs/')
}

task uploadWebsite() {
    group 'website'
    description 'Publishes the JPO website'
    dependsOn uploadWebsitePages, uploadJavadoc, uploadWindowsInstaller
}


allprojects { // Projects
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

/*jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        name = 'hello'
        jvmArgs = ['-Dlog4j.configurationFile=./log4j2.xml']
    }
}*/

// docker run -d --name sonarqube -p 9000:9000 sonarqube:8.4.2-community
// http://localhost admin admin
sonarqube {
    properties {
        property("sonar.projectName", "Java Picture Organizer")
        property("sonar.projectKey", "richardeigenmann_JPO")
        property("sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        property("sonar.sources", "src/main")
        property("sonar.java.binaries", "${project.buildDir}/classes/java/main")
        property("sonar.tests", "src/test")
        property("sonar.tests.binaries", "${project.buildDir}/classes/java/test")
    }
}
project.tasks["sonarqube"].dependsOn jacocoTestReport


//task jpackage(type: Exec) {
//    commandLine "${project.properties['jpackage.home']}/bin/jpackage",
//            'create-app-image',
//            '--name', 'demo',
//            '--input', jar.destinationDirectory.asFile.get(),
//            '--output', "${buildDir}/app-image",
//            '--main-jar', jar.archiveFileName.get()
//    environment << [JPACKAGE_DEBUG: true]
//}

/*

How to do a release:

On a Windows host
cd to a directory like Desktop\build
copy the build/libs/Jpo-all.jar file there and the web/favicon.ico
then run

"c:\Program Files (x86)\jdk-15.0.1\bin\jpackage" ^
--type exe ^
--input . ^
--name JPO ^
--description "Java Picture Organizer" ^
--vendor "Richard Eigenmann" ^
--app-version 0.14 ^
--main-jar Jpo-all.jar ^
--icon favicon.ico ^
--java-options '--enable-preview' ^
--win-shortcut ^
--win-menu ^
--verbose ^
--dest c:\Users\richa\Desktop

Then move the JPO-0.14.exe file back to the source tree into
build/executables

Make sure the file web/jpo-version.json is up to date

 */


// /usr/java/jdk-15.0.1/bin/jpackage --package-type exe --name JPO --description "Java Picture Organizer" --vendor "Richard Eigenmann" --app-version 0.14 --main-jar Jpo-all.jar --java-options '--enable-preview' --win-shortcut --win-menu

// create favicon
// FILE=JPO-Logo_v2.svg; inkscape -w 16 -h 16 -e 16.png ${FILE}; inkscape -w 32 -h 32 -e 32.png ${FILE}; inkscape -w 48 -h 48 -e 48.png ${FILE}; inkscape -w 64 -h 64 -e 64.png ${FILE}; convert 16.png 32.png 48.png 64.png favicon.ico



/*
depends on signJar
# see https://blogs.gnome.org/alexl/2017/02/10/maintaining-a-flatpak-repository/
mkdir -p build/flatpak
flatpak run io.sourceforge.j-po
flatpak remove io.sourceforge.j-po

flatpak run io.sourceforge.j-po


# add the repo:
flatpak --user remote-add --no-gpg-verify flatpak-repo repo
flatpak remotes

# Install
flatpak --user install flatpak-repo io.sourceforge.j-po

flatpak-builder --user --install build/flatpak --repo=build/flatpak-repo --force-clean src/flatpak/io.sourceforge.j-po.json
# build into repo
flatpak-builder --repo=build/flatpak-repo --keep-build-dirs --force-clean build/flatpak src/flatpak/io.sourceforge.j-po.json
flatpak build-export repo build/flatpak-repo build/flatpak stable
flatpak build-sign build/flatpak-repo --gpg-sign=A67917F40940020B0134D3F53949172FBD2EAF66
flatpak build-update-repo build/flatpak-repo --gpg-sign=A67917F40940020B0134D3F53949172FBD2EAF66
gpg2 --export A67917F40940020B0134D3F53949172FBD2EAF66 > repo-public-key.gpg
base64 repo-public-key.gpg | tr -d '\n'
# add it to the flatpakref file
# upload repo to sf
# upload flatpakref


flatpak --user install https://j-po.sourceforge.io/io.sourceforge.j-po.flatpakref

 */